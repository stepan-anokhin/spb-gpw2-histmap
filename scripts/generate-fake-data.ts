import { ArtilleryHit, HitType, House } from "../src/model";
import { houses as spbHouses } from "../src/processing/spb-houses";
import { inspect } from "util";

import {
  fileExists,
  toTypeScriptLiteral,
  writeTypeScriptModule,
} from "../src/processing/script-utils";

/**
 * Generate random hit type.
 */
function randomType(): HitType {
  if (Math.random() < 0.5) {
    return HitType.Artillery;
  } else if (Math.random() < 0.5) {
    return HitType.Incendiary;
  } else {
    return HitType.Fougasse;
  }
}

/**
 * Generate random artillery hit.
 */
function randomHit(
  houses: House[],
  minDate: Date,
  maxDate: Date
): ArtilleryHit {
  const house = houses[Math.floor(Math.random() * houses.length)];
  return {
    type: randomType(),
    address: house.address,
    position: house.position,
    date: randomDate(minDate, maxDate),
    description: "Пробито чердачное перекрытие 3 этажа.",
  };
}

/**
 * Generate random date from the given interval.
 */
function randomDate(start: Date, end: Date): Date {
  return new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime())
  );
}

/**
 * Custom inspect for Date
 */
function inspectDate(this: Date): string {
  return `new Date(${this.getFullYear()}, ${this.getMonth()}, ${this.getDay()})`;
}

/**
 * Generate output module.
 */
async function writeFakeData(
  hits: ArtilleryHit[],
  destinationPath: string
): Promise<void> {
  for (const hit of hits) {
    // @ts-ignore
    hit.date[inspect.custom] = inspectDate;
  }

  const content = `
    // Do not change this file! This code is generated by 'npm run generate:fake-data'. 
    import { ArtilleryHit } from "./model";

    const hits: ArtilleryHit[] =  ${toTypeScriptLiteral(hits)};
    
    export default hits;
  `;
  await writeTypeScriptModule(destinationPath, content);
}

/**
 * Generate random hits.
 */
function randomHits(
  houses: House[],
  minDate: Date,
  maxDate: Date,
  count: number
): ArtilleryHit[] {
  const result: ArtilleryHit[] = [];
  for (let i = 0; i < count; i++) {
    result.push(randomHit(houses, minDate, maxDate));
  }
  return result;
}

type GenerateFakeDataOptions = {
  destinationPath: string;
  count: number;
  minDate: Date;
  maxDate: Date;
  houses: House[];
};

/**
 * Generate fake data.
 */
async function generateFakeData(
  options: GenerateFakeDataOptions
): Promise<void> {
  const { maxDate, minDate, count, destinationPath, houses } = options;

  if (await fileExists(destinationPath)) {
    console.log(`Found ${destinationPath}`);
    return;
  }

  console.log(`Generating fake data...`);
  const hits = randomHits(houses, minDate, maxDate, count);
  console.log(`Generated ${hits.length} fake events!`);

  console.log(`Writing fake data to ${destinationPath}...`);
  await writeFakeData(hits, destinationPath);
  console.log("Writing fake data complete!");
}

generateFakeData({
  destinationPath: "src/data.ts",
  houses: spbHouses,
  minDate: new Date(1941, 5, 23),
  maxDate: new Date(1945, 8, 9),
  count: !isNaN(Number(process.argv[2])) ? Number(process.argv[2]) : 1000,
}).catch(console.error);
